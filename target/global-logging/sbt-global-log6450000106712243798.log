[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@1105a87, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///d%3A/scala/bin/Project0/src/main/scala/CardData.scala","languageId":"scala","version":1,"text":"package help\r\n\r\nimport scala.io.Source \r\nimport java.util.concurrent.TimeUnit\r\nimport scala.concurrent.Await\r\nimport scala.concurrent.duration.Duration\r\nimport java.io._;\r\nimport java.io.File\r\nimport scala.io.StdIn.readLine;\r\nimport org.mongodb.scala._\r\nimport org.mongodb.scala.model._\r\nimport org.mongodb.scala.model.InsertOneModel\r\nimport org.mongodb.scala.model.InsertManyOptions\r\nimport org.mongodb.scala.model.InsertOneOptions\r\nimport org.mongodb.scala.model.Projections._\r\nimport org.mongodb.scala.model.Updates._\r\nimport org.mongodb.scala.model.Filters._\r\nimport org.mongodb.scala.model.Sorts._\r\nimport org.mongodb.scala.model.Aggregates._\r\nimport org.mongodb.scala.model.UpdateOptions\r\nimport org.mongodb.scala.bson.BsonObjectId\r\nimport org.mongodb.scala.Document\r\nimport help.Helper._\r\n\r\n\r\nobject CardData \r\n{\r\n    def main(args: Array[String])\r\n    {\r\n        println(\"Accessing Card Database\")\r\n\r\n        val client: MongoClient = MongoClient()\r\n        val database: MongoDatabase = client.getDatabase(\"Project0\")\r\n        var status: Boolean = true\r\n        var deck: String = \"\"\r\n        var choice: String = \"\"\r\n        var username: String = \"\"\r\n        var usertype: String = \"\"\r\n        var usercmc: String = \"\"\r\n        var amount: String = \"\"\r\n        var username1: String = \"\"\r\n        var lookin: String = \"\"\r\n        var countin: String = \"\"\r\n        var mult: String = \"\"\r\n        var coll: String = \"\"\r\n        var inst: Int = 0\r\n\r\n// runs the operation until the user is finished by initiating a while loop\r\n        while (status == true)\r\n\r\n            {\r\n                println(\"What would you like to do? (type comm to see commands)\")\r\n                choice = scala.io.StdIn.readLine()\r\n\r\n                if (choice.equalsIgnoreCase(\"comm\"))\r\n                {\r\n                    println(\"\\n add- lets you add a card to desired location\"+\r\n                    \"\\n new- creats a new collection\"+\r\n                    \"\\n drop- lets you remove a card from desired location\"+\r\n                    \"\\n look- checks to see if a card is in the database\"+\r\n                    \"\\n update- lets you change a cards information in desired location\"+\r\n                    \"\\n count- will count the amount of cards of a certain name or type within the desired loaction (valid types: land, creature, enchantment, artifact, instant, sorcery, planeswalker)\"+\r\n                    \"\\n show- shows the list of the available collections in the database\"+\r\n                    \"\\n expand- shows the deck list of chosen deck\"+\r\n                    \"\\n quit- exit\")\r\n\r\n                }\r\n                \r\n\r\n\r\n                //add a card to the specified collection\r\n                else if (choice.equalsIgnoreCase(\"add\"))\r\n                {\r\n                    //specify the desire collection\r\n                    println(\"Where would you like to add a card?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n\r\n                    println(\"Is it multiples of the same card?\")\r\n                    mult = scala.io.StdIn.readLine()\r\n\r\n                    if (mult.equalsIgnoreCase(\"yes\"))\r\n                    {\r\n                        //collect card information\r\n                        println(\"What is the name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        println(\"What is the card type?\")\r\n                        usertype = scala.io.StdIn.readLine()\r\n                        println(\"What is the cmc?\")\r\n                        usercmc = scala.io.StdIn.readLine()\r\n                        println(\"How many?\")\r\n                        inst = scala.io.StdIn.readInt()\r\n                        for (i <- 1 to inst)\r\n                        {\r\n                            var newdoc: Document = Document(\"Name\" -> username, \"Type\" -> usertype, \"CMC\" -> usercmc)\r\n                            collection.insertOne(newdoc).printResults()\r\n                        }\r\n                    }\r\n                    else if (mult.equalsIgnoreCase(\"no\"))\r\n                    {\r\n                        //collect card information\r\n                        println(\"What is the name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        println(\"What is the card type?\")\r\n                        usertype = scala.io.StdIn.readLine()\r\n                        println(\"What is the cmc?\")\r\n                        usercmc = scala.io.StdIn.readLine()\r\n                        var newdoc: Document = Document(\"Name\" -> username, \"Type\" -> usertype, \"CMC\" -> usercmc)\r\n                        collection.insertOne(newdoc).printResults()\r\n                    }\r\n\r\n                    else\r\n                    {\r\n                    println(\"Not a valid input\")\r\n                    }\r\n                }\r\n\r\n                //Remove card from the specified location\r\n                else if (choice.equalsIgnoreCase(\"drop\"))\r\n                {\r\n                    //specify the desired collection\r\n                    println(\"Where would you like to remove a card?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n\r\n                    //choose how many instances to remove\r\n                    println(\"Delete all or one instance of the card?\")\r\n                    amount = scala.io.StdIn.readLine()\r\n\r\n                    if (amount.equalsIgnoreCase(\"all\"))\r\n                    {\r\n                        //collect card information\r\n                        println(\"What is the name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        collection.deleteMany(equal(\"Name\", username)).printResults()\r\n                    }\r\n                     else if (amount.equalsIgnoreCase(\"one\"))\r\n                    {\r\n                        //collect card information\r\n                        println(\"What is the name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        collection.deleteOne(equal(\"Name\", username)).printResults()\r\n                    }\r\n\r\n                     else\r\n                    {\r\n                    println(\"Not a valid input\")\r\n                    }\r\n                }\r\n\r\n                //find a card(s) matching the specified data\r\n                else if (choice.equalsIgnoreCase(\"look\"))\r\n                {\r\n                    //specify the search location\r\n                    println(\"Where would you like to look?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n\r\n                    //specify the desired search parameter\r\n                    println(\"What would you like to search? (name, type, cmc)\")\r\n                    lookin = scala.io.StdIn.readLine()\r\n\r\n                    if (lookin.equalsIgnoreCase(\"name\"))\r\n                    {\r\n                        println(\"What is the card name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        collection.find(equal(\"Name\", username)).printResults()\r\n                    }\r\n\r\n                    else if (lookin.equalsIgnoreCase(\"type\"))\r\n                    {\r\n                        println(\"What is the card type?\")\r\n                        usertype = scala.io.StdIn.readLine()\r\n                        collection.find(equal(\"Type\", usertype )).printResults()\r\n                    }\r\n\r\n                    else if (lookin.equalsIgnoreCase(\"cmc\"))\r\n                    {\r\n                        println(\"What is the card cmc?\")\r\n                        usercmc = scala.io.StdIn.readLine()\r\n                        collection.find(equal(\"CMC\", usercmc )).printResults()\r\n                    }\r\n\r\n                     else\r\n                    {\r\n                        println(\"Not a valid input\")\r\n                    }\r\n\r\n                }\r\n                //change the information of a card by replacing it\r\n                else if (choice.equalsIgnoreCase(\"update\"))\r\n                {\r\n                    //specify the desired collection\r\n                    println(\"Where would you like to update a card?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n\r\n                    //choose what card to replace\r\n                    println(\"What is the name of the card you are updating?\")\r\n                    username1 = scala.io.StdIn.readLine()\r\n                    \r\n                    //collected update data\r\n                     println(\"What is the name?\")\r\n                    username = scala.io.StdIn.readLine()\r\n                    println(\"What is the card type?\")\r\n                    usertype = scala.io.StdIn.readLine()\r\n                    println(\"What is the cmc?\")\r\n                    usercmc = scala.io.StdIn.readLine()\r\n\r\n                    collection.replaceOne(equal(\"Name\", username1), \r\n                    Document(\"Name\" -> username, \"Type\" -> usertype, \"CMC\" -> usercmc)\r\n                    ).printResults()\r\n                }\r\n\r\n                else if (choice.equalsIgnoreCase(\"count\"))\r\n                {\r\n                    //specify the desired collection\r\n                    println(\"Where would you like to count cards?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n\r\n                    //specify what you are counting\r\n                    println(\"What are you Counting?\"+\r\n                    \"\\n name- count cards with the chose name\"+\r\n                    \"\\n type- count cards with the chosen type\"+\r\n                    \"\\n cmc- count cards with the chosen cmc\"+\r\n                    \"\\n all- count the total amount of cards in the collection\")\r\n                    countin = scala.io.StdIn.readLine()\r\n\r\n                    if (countin.equalsIgnoreCase(\"name\"))\r\n                    {\r\n                        println(\"What is the card name?\")\r\n                        username = scala.io.StdIn.readLine()\r\n                        collection.countDocuments(equal(\"Name\", username)).printResults()\r\n                    }\r\n\r\n                    else if (countin.equalsIgnoreCase(\"type\"))\r\n                    {\r\n                        println(\"What is the card type? (Creature, Enchantment, Sorcery, Land, Instant, Artifact, or Planeswalker)\")\r\n                        usertype= scala.io.StdIn.readLine()\r\n                        collection.countDocuments(equal(\"Type\", usertype)).printResults()\r\n                    }\r\n                    \r\n                    else if (countin.equalsIgnoreCase(\"cmc\"))\r\n                    {\r\n                        println(\"What is the card cmc?\")\r\n                        usercmc = scala.io.StdIn.readLine()\r\n                        collection.countDocuments(equal(\"CMC\", usercmc)).printResults()\r\n                    }\r\n\r\n                    else if (countin.equalsIgnoreCase(\"all\"))\r\n                    {\r\n                        collection.countDocuments.printResults()\r\n                    }\r\n\r\n                     else\r\n                    {\r\n                    println(\"Not a valid input\")\r\n                    }\r\n\r\n                }\r\n\r\n                else if (choice.equalsIgnoreCase(\"show\"))\r\n                {\r\n                   database.listCollectionNames().printResults()\r\n                }\r\n\r\n                //Show the entire list of chosen deck\r\n                else if (choice.equalsIgnoreCase(\"expand\"))\r\n                {\r\n                    //specify the search location\r\n                    println(\"Where deck you like to expand?\")\r\n                    deck = scala.io.StdIn.readLine()\r\n                    //establish connection to the correct collection\r\n                    var collection: MongoCollection[Document] = database.getCollection(deck)\r\n                    collection.find().printResults()\r\n                }\r\n\r\n                //println(\"Would you like to continue? (yes/no)\")\r\n                //var answer: String = scala.io.StdIn.readLine()\r\n\r\n                else if (choice.equalsIgnoreCase(\"quit\"))\r\n                {\r\n                status = false\r\n                println(\"Goodbye\")\r\n                }\r\n\r\n                 \r\n                 \r\n                 else\r\n                {\r\n                    println(\"Not a valid input\")\r\n                }\r\n            }\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (D:\scala\bin\Project0\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 7 s, completed Oct 27, 2021 8:51:42 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
